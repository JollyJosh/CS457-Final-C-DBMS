 __          __  _                            _          _____                 _____  ____
 \ \        / / | |                          | |        |  __ \               |  __ \|  _ \
  \ \  /\  / /__| | ___ ___  _ __ ___   ___  | |_ ___   | |__) | __ ___ ______| |  | | |_) |
   \ \/  \/ / _ \ |/ __/ _ \| '_ ` _ \ / _ \ | __/ _ \  |  ___/ '__/ _ \______| |  | |  _ <
    \  /\  /  __/ | (_| (_) | | | | | |  __/ | || (_) | | |   | | | (_) |     | |__| | |_) |
     \/  \/ \___|_|\___\___/|_| |_| |_|\___|  \__\___/  |_|   |_|  \___/      |_____/|____/



PRO-DB is a C based database management system that was developed by
Josh Collins (me!) for my CS 457: Databases final project. This project
started as a basic assignment submission, but quickly became something
I felt a great desire to improve on, and make fully functional.

I. File List
------------
main.c             Main driver file that reads and parses
                   the input file to records and record attributes

                   Also creates and writes all output to a
                   file titled "jjcollins2.txt"

record.c      	   Basic record class implementation with all necessary
                   helper functions to create individual and list
                   of record attributes

record.h           Record class header file

recordAttribute.c  Basic record attribute class implementation with
                   helper functions to create individual and list of
                   record attributes

recordAttribute.h  Record attribute class header file

Program can be built using default make arguments:

    make

Program object files can be removed and cleaned using
default make clean arguments:

    make clean

Program can be ran by running the executable in the
"CMakeFiles" directory titled "Final" (post a make command to build objects).

II. Design
------------

1. General

    PRO-DB is a C based database management system, which can read in records
    and record attributes to store, manipulate, query, and sort the data in said records.
    The underlying implementation of this system is a 3 dimensional data cube
    (a list of lists of lists). This structure can be portrayed in the following two frames:

    2 Dimensional Record Structure
    ------------------------------

    /******************/        /******************/        /******************/
    /*                */        /*                */        /*                */
    /*   Record 1     */   =>   /*   Record 2     */   =>   /*   Record 3     */    => ....
    /*   Version 1    */        /*   Version 1    */        /*   Version 1    */
    /*                */        /*                */        /*                */
    /******************/        /******************/        /******************/

            ||                           ||                          ||
            vv                           vv                          vv

    /******************/        /******************/        /******************/
    /*                */        /*                */        /*                */
    /*   Record 1     */        /*   Record 2     */        /*   Record 3     */
    /*   Version 2    */        /*   Version 2    */        /*   Version 3    */
    /*                */        /*                */        /*                */
    /******************/        /******************/        /******************/

            ||                           ||                          ||
            vv                           vv                          vv

           ....                         ....                        ....

    From here every record has a list of record attributes attached to it,
    as seen in the following frame:

    Record Attribute Structure (Third Dimension)
    --------------------------------------------

     /******************/        /******************/        /******************/
     /*                */  First /*                */  Next  /*                */
     /*                */  Attr  /*  Record Attr 1 */  Attr  /*  Record Attr 2 */
     /*   Record 1     */   =>   /*  Record 1      */   =>   /*  Record 1      */   =>  ....
     /*   Version 1    */        /*  Version 1     */        /*  Version 1     */
     /*                */        /*                */        /*                */
     /******************/        /******************/        /******************/

     Unfortunately storing records and record attributes this way can lead to rather
     long run times. In the case of searching for records which contain a particular
     attribute, the user can expect an O(n^3) run time to search the whole list. When
     searching for a particular record in general, a user can expect an O(n^2) run time.
     Future improvements to this project include using hashing and various other structure
     methods to improve efficiency for storing data.

2. Data Input Format

    As of right now, the file is read in from a default file called data.txt. In
    the future this file will be read through the command line as an argument. Assuming
    good input, the data should always be the name of the attribute, immediately
    followed by a colon, immediately followed by an integer value, followed by
    a space to signify the next record attribute, as follows:

        nameOfAttribute1:4 nameOfAttribute2:102 nameOfAttribute3:1234

    Each line should contain a separate record, and each record must contain at least
    one attribute named "DocID". If the user wanted to create two records, each with a
    DocID attribute and an attribute named "empID", the data input should look as follows:

        DocID:10 empID:15
        DocID:11 empID:16

3. Command Operations Functionality

    A. General

        All commands are currently being read in via an input file named "queries.txt".
        In the future versions this file will be read in as the second command line argument.
        All commands should be given their own line (one command per line). The program can
        read multiple commands, and will process these commands sequential until the program
        reaches the end of the queries file.

    B. The Count Command

        The collection for the database is called "final". As such the command to count
        records in the collection is:

            final.count([recordAttributeName], [versionNumber])

        As such, if the user wanted to count the number of records that contain
        the attribute "Dept" the second version of the record, the user would input the
        following:

            final.count([Dept], [2])

    C.  The Insert Command

        With this command, new records can be inserted into the database as follows:

            final.insert(attribute1:a1Value attribute2:a2Value ...)

        It is important to note that this feature will allow the user to insert as many
        attributes as they would like, but the record must still include a "DocID" attribute.
        If a user wishes to input a record that has a DocID of 4 and am attribute named "empID"
        that contains a value of 4, it would look as such:

            final.insert(DocID:4 empID:4)

        It is important to note that only one record can be implemented per command. To insert
        mutiple records, the insert command must be called multiple times.

    D.  The Sort Command

        This feature is in the process of being implemented.

    E.  The Query Command

        This feature is in the process of being implemented.

III. Conclusion
---------------

1. Final Note

   This project started as a final project for my Databases class, but I was not able to
   complete it in time as I was drawn away to finish another class. However, I greatly enjoyed
   working on it. I have come across many unique and interesting challenges with this
   project, and I have had a great time overcoming them. As such, I am continuing to work
   on it in my free time. - Josh



