 __          __  _                            _          _____                 _____  ____
 \ \        / / | |                          | |        |  __ \               |  __ \|  _ \
  \ \  /\  / /__| | ___ ___  _ __ ___   ___  | |_ ___   | |__) | __ ___ ______| |  | | |_) |
   \ \/  \/ / _ \ |/ __/ _ \| '_ ` _ \ / _ \ | __/ _ \  |  ___/ '__/ _ \______| |  | |  _ <
    \  /\  /  __/ | (_| (_) | | | | | |  __/ | || (_) | | |   | | | (_) |     | |__| | |_) |
     \/  \/ \___|_|\___\___/|_| |_| |_|\___|  \__\___/  |_|   |_|  \___/      |_____/|____/



PRO-DB is a C based database management system that was developed by
Josh Collins (me!) for my CS 457: Databases final project. This project
started as a basic assignment submission, but quickly became something
I felt a great desire to improve on, and make fully functional.

I. File List
------------
main.c             Main driver file that reads and parses
                   the input file to records and record attributes

                   Also creates and writes all output to a
                   file titled "jjcollins2.txt"

record.c      	   Basic record class implementation with all necessary
                   helper functions to create individual and list
                   of record attributes

record.h           Record class header file

recordAttribute.c  Basic record attribute class implementation with
                   helper functions to create individual and list of
                   record attributes

recordAttribute.h  Record attribute class header file

Program can be built using default make arguments:

    make

Program object files can be removed and cleaned using
default make clean arguments:

    make clean

Program can be ran by running the executable in the
"CMakeFiles" directory titled "Final" (post a make command to build objects).

II. Design
------------

1. General

    PRO-DB is a C based database management system, which can read in records
    and record attributes to store, manipulate, query, and sort the data in said records.
    The underlying implementation of this system is a 3 dimensional data cube
    (a list of lists of lists). This structure can be portrayed in the following two frames:

    2 Dimensional Record Structure
    ------------------------------

    /******************/        /******************/        /******************/
    /*                */        /*                */        /*                */
    /*   Record 1     */   =>   /*   Record 2     */   =>   /*   Record 3     */    => ....
    /*   Version 1    */        /*   Version 1    */        /*   Version 1    */
    /*                */        /*                */        /*                */
    /******************/        /******************/        /******************/

            ||                           ||                          ||
            vv                           vv                          vv

    /******************/        /******************/        /******************/
    /*                */        /*                */        /*                */
    /*   Record 1     */        /*   Record 2     */        /*   Record 3     */
    /*   Version 2    */        /*   Version 2    */        /*   Version 3    */
    /*                */        /*                */        /*                */
    /******************/        /******************/        /******************/

            ||                           ||                          ||
            vv                           vv                          vv

           ....                         ....                        ....

    From here every record has a list of record attributes attached to it,
    as seen in the following frame:

    Record Attribute Structure (Third Dimension)
    --------------------------------------------

     /******************/        /******************/        /******************/
     /*                */  First /*                */  Next  /*                */
     /*                */  Attr  /*  Record Attr 1 */  Attr  /*  Record Attr 2 */
     /*   Record 1     */   =>   /*  Record 1      */   =>   /*  Record 1      */   =>  ....
     /*   Version 1    */        /*  Version 1     */        /*  Version 1     */
     /*                */        /*                */        /*                */
     /******************/        /******************/        /******************/

     Unfortunately storing records and record attributes this way can lead to rather
     long run times. In the case of searching for records which contain a particular
     attribute, the user can expect an O(n^3) run time to search the whole list. When
     searching for a particular record in general, a user can expect an O(n^2) run time.
     Future improvements to this project include using hashing and various other structure
     methods to improve efficiency for storing data.